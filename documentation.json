{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-ee2067dfb1c303f41003aea7d82d51e0",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-fd3d2027fe5bb8fb355d38771eca8225",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'app-storybook'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'app-storybook';\n\n  onChange(event: any) {\n\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<storybook-button\n  [primary]=\"true\"\n  size=\"medium\"\n  label=\"Button\"\n  (onClick)=\"onChange($event)\"\n></storybook-button>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CardComponent",
            "id": "component-CardComponent-25126758dab6ac0338c1d0aa9ccd20df",
            "file": "src/stories/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "story-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "imageUrl",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "pageCount",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "published",
                    "line": 15,
                    "type": "string"
                },
                {
                    "name": "publisher",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "subTitle",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "title",
                    "line": 11,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from \"@angular/core\";\n\n@Component({\n    selector: 'story-card',\n    templateUrl: './card.component.html',\n    styleUrls: ['./card.component.scss']\n})\nexport default class CardComponent {\n\n    @Input() imageUrl: string;\n    @Input() title: string;\n    @Input() subTitle: string;\n    @Input() pageCount: string;\n    @Input() publisher: string;\n    @Input() published: string;\n\n    constructor() {\n        this.title = \"\";\n        this.subTitle = \"\";\n        this.imageUrl = 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSh6zKQpZZlZy4RnkXeMXslIklt9aZQdvLavA&usqp=CAU';\n    \n        this.pageCount = \"\";\n        this.publisher = \"\";\n        this.published = \"\";\n    }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../assets/styles/variable.scss';\n\n.books {\n    max-width: 1135px;\n    width: 100%;\n    display: flex;\n    flex-wrap: wrap;\n    gap: 10px;\n    align-items: center;\n    position: relative;\n\n    &__card {\n\n        background: $color-white;\n        border-radius: 4px;\n        box-shadow: 0px 6px 24px rgb(84 16 95 / 13%);\n        max-width: 272px;\n        width: 100%;\n        height: 160px;\n        \n        display: flex;\n        flex-direction: row;\n        cursor: pointer;\n    }\n\n    &__image {\n        display: flex;\n        align-items: center;\n\n        img {\n            width: 90px;\n            height: 135px;\n            padding: 0 8px;\n        }\n    }\n\n    &__content {\n        display: flex;\n\n        justify-content: space-between;\n        flex-direction: column;\n        padding: 14px 0;\n\n        header {\n            > h1 {\n                font-weight: 500;\n                font-size: 16px;\n\n            }\n\n            > h4 {\n                color: $color-pink;\n                font-weight: normal;\n                font-size: 12px;\n            }\n        }\n    }\n\n    &__description {\n\n        width: 100%;\n        \n        display: flex;\n        flex-direction: column;\n        justify-content: space-evenly;\n        color: $color-light-gray;\n        font-size: 12px;\n        line-height: 22px;\n    }\n}\n\nsection {\n    width: 100%;\n\n    display: flex;\n    justify-content: center;\n}",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            },
            "templateData": "<div class=\"books\">\n    <div class=\"books__card\">\n        <div class=\"books__image\">\n            <img [src]=\"imageUrl\" [alt]=\"title\" />\n        </div>\n        \n        <div class=\"books__content\">\n            <header>\n                <h1> {{ title }} </h1>\n                <h4 *ngFor=\"let author of book.authors\"> {{ subTitle }} </h4>\n            </header>\n\n            <span class=\"books__description\">\n                <span>{{ pageCount }} páginas</span>\n                <span>Editora {{ publisher }}</span>\n                <span>Publicado em {{ published }}</span>\n            </span>\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "LoadingComponent",
            "id": "component-LoadingComponent-3b88b20207952dcd22b3130a9a9bdaf6",
            "file": "src/stories/loading/loading.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ioa-loading",
            "styleUrls": [
                "./loading.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./loading.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isLoading",
                    "line": 10,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from \"@angular/core\";\n\n@Component({\n    selector: 'ioa-loading',\n    templateUrl: './loading.component.html',\n    styleUrls: ['./loading.component.scss']\n})\nexport default class LoadingComponent {\n\n    @Input() isLoading: boolean;\n\n    constructor() {\n        this.isLoading = false;\n    }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../assets/styles/variable.scss';\n\n.loading {\n    position: absolute;\n    top: 0;\n    left: 0;\n    \n    width: 100%;\n    height: 100%;\n    background: $color-light-pink;\n    opacity: 0.7;\n\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    color: $color-white;\n    font-size: 35px;\n}",
                    "styleUrl": "./loading.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "templateData": "<div *ngIf=\"isLoading\" class=\"loading\"> Carregando... </div>"
        },
        {
            "name": "MenuComponent",
            "id": "component-MenuComponent-9a444d75329a82d310dc1d33fa602067",
            "file": "src/stories/menu/menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ioa-menu",
            "styleUrls": [
                "./menu.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "userName",
                    "line": 10,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "onLogout",
                    "line": 11,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from \"@angular/core\";\n\n@Component({\n    selector: 'ioa-menu',\n    templateUrl: './menu.component.html',\n    styleUrls: ['./menu.component.scss']\n})\nexport default class MenuComponent {\n\n    @Input() userName: string;\n    @Output() onLogout: EventEmitter<void> \n\n    constructor() {\n        this.userName = \"\";\n        this.onLogout = new EventEmitter();\n    }\n\n    logout(): void {\n        this.onLogout.emit();\n    }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".menu {\n    max-width: 1135px;\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    \n    align-items: center;\n    justify-content: space-between;\n    margin-bottom: 50px;\n\n    > h1 {\n        > span {\n            font-size: 18px;\n            font-weight: normal;\n        }\n    }\n\n    &__logout {\n\n        display: flex;\n        align-items: center;\n        gap: 10px;\n\n        padding: 10px;\n\n        > svg {\n            width: 25px;\n            cursor: pointer;\n        }\n\n    }\n}\n\nsection {\n    width: 100%;\n    \n    display: flex;\n    align-items: center;\n    justify-content: center;\n}",
                    "styleUrl": "./menu.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "templateData": "<section>\n    <header class=\"menu\">\n        <h1> ioasys <span>Books</span> </h1>\n\n        <span class=\"menu__logout\">\n            <label> Bem vindo, <b> {{ userName }} </b> </label>\n            <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <circle r=\"15.5\" transform=\"matrix(-1 0 0 1 16 16)\" stroke=\"#333333\" stroke-opacity=\"0.2\"/>\n                <path d=\"M19 12L23 16M23 16L19 20M23 16H12.5\" stroke=\"#333333\" stroke-linejoin=\"round\"/>\n                <path d=\"M14.5 9H11C9.89543 9 9 9.89543 9 11V21C9 22.1046 9.89543 23 11 23H14.5\" stroke=\"#333333\" stroke-linejoin=\"round\"/>\n            </svg>\n        </span>\n    </header>\n</section>"
        },
        {
            "name": "PaginatedComponent",
            "id": "component-PaginatedComponent-0bcc4088b5bec835185e929285220f2b",
            "file": "src/stories/paginated/paginated.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-paginated",
            "styleUrls": [
                "./paginated.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./paginated.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentPage",
                    "line": 10,
                    "type": "number"
                },
                {
                    "name": "total",
                    "line": 13,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "line": 17,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_totalPage",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "checkNextChange",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 48
                },
                {
                    "name": "checkPrevChange",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "next",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "prev",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from \"@angular/core\";\n\n@Component({\n    selector: 'app-paginated',\n    templateUrl: './paginated.component.html',\n    styleUrls: ['./paginated.component.scss']\n})\nexport default class PaginatedComponent {\n    \n    @Input() currentPage: number;\n\n    _totalPage: number;\n    @Input() set total(value: number) {\n        this._totalPage = Math.ceil(value);\n    }\n    \n    @Output() onChange: EventEmitter<number>;\n\n    constructor() {\n        this._totalPage = 0;\n        this.currentPage = 1;\n        this.total = 0;\n        this.onChange = new EventEmitter();\n    }\n\n    prev(): void {\n        if (this.checkPrevChange()) {\n            return;\n        }\n\n        const newPage = this.currentPage - 1;\n        this.onChange.emit(newPage);\n    }\n\n    next(): void {\n        if (this.checkNextChange()) {\n            return;\n        }\n\n        const newPage = this.currentPage + 1;\n        this.onChange.emit(newPage);\n    }\n\n    checkPrevChange(): boolean {\n        return this.currentPage <= 1;\n    }\n\n    checkNextChange(): boolean {\n        return this.currentPage >= this.total;\n    }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../assets/styles/variable.scss';\n\nfooter {\n\n    margin: 30px 0;\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n\n.paginated {\n    display: flex;\n    max-width: 1110px;\n    width: 100%;\n    \n    align-items: center;\n    justify-content: flex-end;\n    gap: 20px;\n\n    &__icons {\n        display: flex;\n        gap: 10px;\n\n        > button {\n            background-color: transparent;\n            border-radius: 50%;\n            border: 2px solid $color-light-gray-two;\n            color: $color-light-gray-two;\n\n            width: 45px;\n            height: 45px;\n\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            cursor: pointer;\n\n            &:disabled {\n                cursor: no-drop;\n            }\n        }\n    }\n}\n\n@media (max-width: 767.98px) { \n    .paginated {\n        justify-content: center;\n        width: 92%;\n    }\n}",
                    "styleUrl": "./paginated.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 17
            },
            "accessors": {
                "total": {
                    "name": "total",
                    "setSignature": {
                        "name": "total",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 13,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<footer>\n    <div class=\"paginated\">\n        <div>Página <b> {{ currentPage }} </b> de <b> {{ _totalPage }} </b></div>\n        <div class=\"paginated__icons\">\n            <button \n                type=\"button\"\n                (click)=\"prev()\" \n                [disabled]=\"checkPrevChange()\"> \n                <span> < </span> \n            </button>\n            <button \n                type=\"button\"\n                (click)=\"next()\" \n                [disabled]=\"checkNextChange()\">\n                <span> > </span>\n            </button>\n        </div>\n    </div>\n</footer>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Base",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Card.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoadingDefault",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Loading.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MenuDefault",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Menu.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PaginatedDefault",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Paginated.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Card.stories.ts",
                "type": "Story<Card>",
                "defaultValue": "() => ({\n  component: Card,\n  template: `\n    <story-card\n      title=\"Title Card\"\n      subTitle=\"Sub-Title\"\n      pageCount=\"0\"\n      publisher=\"Publisher\"\n      published=\"2021\">\n    </story-card>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Loading.stories.ts",
                "type": "Story<Loading>",
                "defaultValue": "(args: Loading) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Menu.stories.ts",
                "type": "Story<Menu>",
                "defaultValue": "(args: Menu) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Paginated.stories.ts",
                "type": "Story<Paginated>",
                "defaultValue": "(args: Paginated) => ({\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/stories/Card.stories.ts": [
                {
                    "name": "Base",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Card.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Card.stories.ts",
                    "type": "Story<Card>",
                    "defaultValue": "() => ({\n  component: Card,\n  template: `\n    <story-card\n      title=\"Title Card\"\n      subTitle=\"Sub-Title\"\n      pageCount=\"0\"\n      publisher=\"Publisher\"\n      published=\"2021\">\n    </story-card>\n  `,\n})"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Loading.stories.ts": [
                {
                    "name": "LoadingDefault",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Loading.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Loading.stories.ts",
                    "type": "Story<Loading>",
                    "defaultValue": "(args: Loading) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Menu.stories.ts": [
                {
                    "name": "MenuDefault",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Menu.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Menu.stories.ts",
                    "type": "Story<Menu>",
                    "defaultValue": "(args: Menu) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Paginated.stories.ts": [
                {
                    "name": "PaginatedDefault",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Paginated.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Paginated.stories.ts",
                    "type": "Story<Paginated>",
                    "defaultValue": "(args: Paginated) => ({\n  props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Base",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Loading.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoadingDefault",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Loading.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MenuDefault",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Paginated.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PaginatedDefault",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Paginated.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/stories/loading/loading.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoadingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/stories/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/paginated/paginated.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginatedComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}